package com.ff0000.utils.zencode {    import flash.display.MovieClip;	import flash.events.MouseEvent;	    import flash.desktop.NativeProcess;    import flash.desktop.NativeProcessStartupInfo;    import flash.events.Event;    import flash.events.ProgressEvent;    import flash.events.IOErrorEvent;    import flash.events.NativeProcessExitEvent;    import flash.filesystem.File;	import com.greensock.TweenLite;	import flash.net.URLRequest;	import fl.video.MetadataEvent;	import flash.events.KeyboardEvent;		public class ZEncode extends MovieClip{		// process utilities		private var confirmProcess:NativeProcess;		private var installProcess:NativeProcess;		private var encodeProcess:NativeProcess;				private var encodeSettings:Object;				// on stage		public var reviewContainer:MovieClip;		public var progressIndication:MovieClip;		public var inputVideo:MovieClip;		public var output:MovieClip;				// constructor code		public function ZEncode() {			addEventListener( Event.ADDED_TO_STAGE, handleAddedToStage );			progressIndication.alpha = 0;			progressIndication.visible = false;						inputVideo.alpha = 0;			inputVideo.visible = false;						reviewContainer.alpha = 0;			reviewContainer.visible = false;		}				// handle added to stage		private function handleAddedToStage( $_e:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, handleAddedToStage );            if( NativeProcess.isSupported ) {                confirmFFMPEGInstall();            }            else {                trace("NativeProcess not supported.");            }		}								// confirm ffmpeg install		private function confirmFFMPEGInstall():void {			trace( this, 'confirmFFMPEGInstall()' );			var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();			var file:File = File.applicationDirectory.resolvePath( '/usr/bin/python' );			nativeProcessStartupInfo.executable = file;			var processArgs:Vector.<String> = new Vector.<String>();			processArgs[0] = File.applicationDirectory.resolvePath( 'confirm_ffmpeg.py' ).nativePath;			nativeProcessStartupInfo.arguments = processArgs;						confirmProcess = new NativeProcess();			confirmProcess.addEventListener( ProgressEvent.STANDARD_OUTPUT_DATA, handleConfirmOutput );			//confirmProcess.addEventListener( ProgressEvent.STANDARD_OUTPUT_DATA, handleConfirmError );			//confirmProcess.addEventListener( NativeProcessExitEvent.EXIT, handleConfirmComplete );			confirmProcess.start( nativeProcessStartupInfo );		}		private function handleConfirmOutput( $_e:ProgressEvent ):void {			var _result:String = String( confirmProcess.standardOutput.readUTFBytes( confirmProcess.standardOutput.bytesAvailable ));			//trace( 'STDOUT ' + confirmProcess.standardOutput.readUTFBytes( confirmProcess.standardOutput.bytesAvailable ) );			var _status:Array = _result.match( /No\ssuch\sfile\sor\sdirectory/ );			trace( 'CONFIRM FFMPEG RESULT: '+_status );			confirmProcess.exit();			if( _status != null )				//doInstallFFMPEG();				output.tf.text = 'Please have Greg run the FFMPEG install script.';			else initUI();		}		// init UI		private function initUI():void {			trace( this, 'initUI()' );			encodeSettings = {};						inputVideo.path.tabEnabled = false;			inputVideo.browse.tabIndex = 1;			inputVideo.w.tabIndex = 2;			inputVideo.h.tabIndex = 3;			inputVideo.bitrate.tabIndex = 4;			inputVideo.encode.tabIndex = 5;			output.tf.tabEnabled = false;			output.tf.focusRect = false;						inputVideo.visible = true;			TweenLite.to( inputVideo, 0.3, { alpha: 1 });			inputVideo.path.addEventListener( MouseEvent.CLICK, handleBrowseFileRequest );			inputVideo.browse.addEventListener( MouseEvent.CLICK, handleBrowseFileRequest );			inputVideo.browse.addEventListener( KeyboardEvent.KEY_DOWN, handleBrowseKeydown );						inputVideo.encode.addEventListener( MouseEvent.CLICK, handleEncodeRequest );			inputVideo.encode.addEventListener( KeyboardEvent.KEY_DOWN, handleEncodeKeydown );		}				// handle browse file request		private function handleBrowseFileRequest( $_e:MouseEvent = null ):void {			trace( 'handle browse' );			encodeSettings.file = new File();			encodeSettings.file.addEventListener( Event.SELECT, handleFileSelect );			encodeSettings.file.browse();		}		// handle browse key down		private function handleBrowseKeydown( $_e:KeyboardEvent ):void {			//trace( $_e.charCode );			if( $_e.charCode == 13 ) {				handleBrowseFileRequest();			}		}		private function handleFileSelect( $_e:Event ):void {			inputVideo.path.text = encodeSettings.file.name;			encodeSettings.path = encodeSettings.file.nativePath.substr( 0, encodeSettings.file.nativePath.length - encodeSettings.file.name.length );		}		// handle key down		private function handleEncodeKeydown( $_e:KeyboardEvent ):void {			//trace( $_e.charCode );			if( $_e.charCode == 13 ) {				handleEncodeRequest();			}		}		// handle encode request		private function handleEncodeRequest( $_e:MouseEvent = null ):void {			trace( this, 'handleEncodeRequest()' );			// validate			var _errorResult:String = '';			if( encodeSettings.file == null ) 				_errorResult += 'Please select a file<br />';			if( inputVideo.w.text == '' || inputVideo.h.text == '' ) 				_errorResult += 'Please specify a width/height.<br />';			if( inputVideo.bitrate.text == '' ) 				_errorResult += 'Please specify a target bitrate.<br />';			encodeSettings.bitrate = parseInt( inputVideo.bitrate.text );			if( encodeSettings.bitrate < 200 ) 				_errorResult += 'Please select a bitrate greater-than or equal to 200.<br />';			if( _errorResult != '' ) {				output.tf.htmlText = '<font color="#990000;">' + _errorResult + '</font>';				return;			}			encodeSettings.size = inputVideo.w.text + 'x' + inputVideo.h.text;			output.tf.text = '';			progressIndication.visible = true;			progressIndication.tf.text = 'ENCODING';			TweenLite.to( progressIndication, 0.3, { alpha: 1 });			var _nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();			var _file:File = File.applicationDirectory.resolvePath( '/usr/bin/python' );			_nativeProcessStartupInfo.executable = _file;			var _processArgs:Vector.<String> = new Vector.<String>();			_processArgs[0] = File.applicationDirectory.resolvePath( 'encode_ffmpeg.py' ).nativePath;			_processArgs[1] = '-p';			_processArgs[2] = encodeSettings.path;			_processArgs[3] = '-t';			_processArgs[4] = encodeSettings.file.name;			_processArgs[5] = '-s';			_processArgs[6] = encodeSettings.size;			_processArgs[7] = '-b';			_processArgs[8] = encodeSettings.bitrate;						_nativeProcessStartupInfo.arguments = _processArgs;						encodeProcess = new NativeProcess();			encodeProcess.addEventListener( ProgressEvent.STANDARD_OUTPUT_DATA, handleEncodeOutput );			encodeProcess.addEventListener( NativeProcessExitEvent.EXIT, handleEncodeComplete );			encodeProcess.start( _nativeProcessStartupInfo );		}		// handle encode output		private function handleEncodeOutput( $_e:ProgressEvent ):void {			var _result:String = String( encodeProcess.standardOutput.readUTFBytes( encodeProcess.standardOutput.bytesAvailable ));			output.tf.text = output.tf.text + '\n' + _result;			var _resultFile:String = parseStdoutFor( _result, 'resultFile' );			if( _resultFile )				encodeSettings.resultFile = _resultFile;		}		// handle encode complete		private function handleEncodeComplete( $_e:NativeProcessExitEvent ):void {			openPreviewWith( encodeSettings.path + encodeSettings.resultFile );		}				// open preview with		private function openPreviewWith( $_target:String ):void {			TweenLite.to( progressIndication, 0.3, { alpha: 0, onComplete: function() { progressIndication.visible = false; }});			output.tf.text = output.tf.text + '\nEncode complete!!';			var _resultFile:File = File.applicationDirectory.resolvePath( $_target );			reviewContainer.tf.htmlText = _resultFile.nativePath + '<br/>Result ksize: <font color="#990000;">' + Math.round( _resultFile.size/1000 ) + 'k</font>';						reviewContainer.flvPlayback.addEventListener( MetadataEvent.METADATA_RECEIVED, handleMetadata );			reviewContainer.closeButton.addEventListener( MouseEvent.CLICK,closePreview );			reviewContainer.flvPlayback.source = 'file://' + _resultFile.nativePath;						reviewContainer.visible = true;			TweenLite.to( reviewContainer, 0.3, { alpha: 1 });		}		private function handleMetadata( $_e:MetadataEvent ):void {			reviewContainer.flvPlayback.width = $_e.info.width;			reviewContainer.flvPlayback.height = $_e.info.height;			reviewContainer.flvPlayback.x = Math.round(( 900 - $_e.info.width ) / 2 );			reviewContainer.flvPlayback.y = 50 + Math.round(( 600 - $_e.info.height ) / 2 );		}				// close preview		private function closePreview( $_e:MouseEvent ):void {			reviewContainer.flvPlayback.removeEventListener( MetadataEvent.METADATA_RECEIVED, handleMetadata );			reviewContainer.closeButton.removeEventListener( MouseEvent.CLICK,closePreview );			reviewContainer.flvPlayback.stop();			TweenLite.to( reviewContainer, 0.3, { alpha: 0, onComplete: function() { reviewContainer.visible = false; }});		}								// -- install ffmpeg 		private function doInstallFFMPEG():void {			trace( this, 'doInstallFFMPEG()' );			progressIndication.visible = true;			progressIndication.tf.text = 'INSTALLING FFMPEG';			TweenLite.to( progressIndication, 0.3, { alpha: 1 });						var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();			var file:File = File.applicationDirectory.resolvePath( '/usr/bin/python' );			nativeProcessStartupInfo.executable = file;						var processArgs:Vector.<String> = new Vector.<String>();			processArgs[0] = File.applicationDirectory.resolvePath( 'install_ffmpeg.py' ).nativePath;			nativeProcessStartupInfo.arguments = processArgs;						installProcess = new NativeProcess();			installProcess.addEventListener( ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData );			installProcess.addEventListener( ProgressEvent.STANDARD_ERROR_DATA, onErrorData );			installProcess.addEventListener( NativeProcessExitEvent.EXIT, handleProcessComplete );			installProcess.start( nativeProcessStartupInfo );		}		public function onOutputData(event:ProgressEvent):void {			var _output:String = String( installProcess.standardOutput.readUTFBytes( installProcess.standardOutput.bytesAvailable ));			//trace( 'STDOUT: ' + process.standardOutput.readUTFBytes( process.standardOutput.bytesAvailable ) );			var _status:Array = _output.match( /<AS3>.*<\/AS3>/ );			if( _status != null )				progressIndication.outputTf.text = _status[0].substr( 5, _status[0].length-10 ) + '\n' + progressIndication.outputTf.text;		}		public function onErrorData(event:ProgressEvent):void {			//var _output:String = String( process.standardOutput.readUTFBytes( process.standardOutput.bytesAvailable ));			//trace( 'STDERR: ' + process.standardOutput.readUTFBytes( process.standardOutput.bytesAvailable ) );			//var _status:Array = _output.match( /toAS3:.*/ );			//if( _status.length > 0 )				//installFFMPEG.outputTf.text = _status[0] + '\n' + installFFMPEG.outputTf.text;		}		private function handleProcessComplete( $_e:NativeProcessExitEvent ):void {			trace( " - PROCESS COMPLETE: ", $_e.exitCode );			installProcess.removeEventListener( ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData );			installProcess.removeEventListener( ProgressEvent.STANDARD_ERROR_DATA, onErrorData );			installProcess.removeEventListener( NativeProcessExitEvent.EXIT, handleProcessComplete );			TweenLite.to( progressIndication, 0.3, { alpha: 0, onComplete: function() { progressIndication.visible = false; }});			initUI();		}										/* -- UTILITIES --------------------------------------------------		 *		 *		 */		private function parseStdoutFor( $_string:String, $_tag ):String {			var _as3Messages:Array = $_string.match( /<AS3>.+<\/AS3>/g );			for( var _i:int = 0; _i < _as3Messages.length; _i++ ) {				_as3Messages[_i] = new XML( _as3Messages[_i] );				if( _as3Messages[_i][$_tag] != null ) {					return _as3Messages[_i][$_tag];				}			}			return null;		}	}	}