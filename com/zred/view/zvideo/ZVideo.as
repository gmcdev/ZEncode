package com.zred.view.zvideo {	/* -- ZVideo ----------------------	 *	 * 		VERSION 2012.03.22	 *	 */	import flash.events.Event;	import flash.display.MovieClip;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.events.NetStatusEvent;	import flash.events.MouseEvent;	import flash.events.SecurityErrorEvent;	import flash.events.AsyncErrorEvent;	import flash.events.IOErrorEvent;	import flash.media.Video;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class ZVideo extends MovieClip {				// events		static public const EVENT_VIDEO_START:String = 'videoStart';		static public const EVENT_VIDEO_END:String = 'videoEnd';		static public const EVENT_CUE_TIME:String = 'cueTime';				// settings		public var timeoutIn:int = 3000; // 3 seconds;		public var doFadeIn:Boolean = false;				// cue times vars		public var cueTimes:Array;		public var currentCueTime:Object; // referenced by event.currentTarget		private var currentCueTimeIndex:int;						// video vars		private var rtmpPath:String;		private var videoFile:String;				private var connection:NetConnection;		private var stream:NetStream;		private var netstreamIsComplete:Boolean;				private var metaData:Object;				private var video:Video;				private var timeoutTimer:Timer;						// constructor code		public function ZVideo() {			//		}						/* -- VIDEO INITIALIZATION --------------------------------------------------		 *		 *		 */		public function initVideo( $_videoAsset:String ):void {			this.visible = false;			parseRequested( $_videoAsset );			connectVideo();		}		public function killVideo():void {			if( connection.connected ) 				connection.close();			connection.removeEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );			connection.removeEventListener( NetStatusEvent.NET_STATUS, netStatusHandler );			connection.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler );			stream.removeEventListener( NetStatusEvent.NET_STATUS, netStatusHandler );			stream.removeEventListener( AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler );			stream.close();		}		private function parseRequested( $_videoAsset:String ):void {			if( isStreamable( $_videoAsset )) {				trace( this, ' - is streamable' );				rtmpPath = $_videoAsset.substr( 0, $_videoAsset.lastIndexOf( '/' ) + 1 ).replace( 'http://wpc.', 'rtmp://fms.' ).replace( 'http://wac.', 'rtmp://fms.' );				if( $_videoAsset.indexOf( '.mp4' ) != -1 )  {					videoFile = 'mp4:' + $_videoAsset.substr( $_videoAsset.lastIndexOf( '/' ) + 1 );				}				else videoFile = $_videoAsset.substr( $_videoAsset.lastIndexOf( '/' ) + 1 ).replace( '.flv', '' );			}			else {				trace( this, ' - is NOT streamable' );				rtmpPath = null;				videoFile = $_videoAsset;			}		}		private function isStreamable( $_videoAsset:String ):Boolean {			return ( $_videoAsset.indexOf( 'http' ) != -1 && $_videoAsset.indexOf( 'rtmp' ) == -1 ) ? false : true;		}				/* -- VIDEO STREAM MANAGEMENT --------------------------------------------------		 *		 *		 */		private function connectVideo():void {			trace( this, 'connectVideo(): '+rtmpPath );			connection = new NetConnection();			connection.client = this;			connection.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );			connection.addEventListener( NetStatusEvent.NET_STATUS, netStatusHandler );			connection.addEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler );			startTimeoutTimer();			connection.connect( rtmpPath );		}		private function playVideo():void {			trace( this, 'playVideo()', videoFile );			stream = new NetStream( connection );			stream.client = this;			stream.addEventListener( NetStatusEvent.NET_STATUS, netStatusHandler );			stream.addEventListener( AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler );			stream.bufferTime = 1; 			netstreamIsComplete = false;						video = new Video();			video.attachNetStream( stream );			addChild( video );						startCueTimeListening();			stream.play( videoFile );		}				private function startCueTimeListening():void {			if( cueTimes ) {				currentCueTimeIndex = 0;				addEventListener( Event.ENTER_FRAME, handleEnterFrame );			}		}		private function handleEnterFrame( $_e:Event ):void {			for( var _i:int = currentCueTimeIndex; _i < cueTimes.length; _i++ ) {				var _cueTime:Object = cueTimes[_i];				if( stream.time >= _cueTime.seconds ) {					currentCueTimeIndex++;					currentCueTime = _cueTime;					dispatchEvent( new Event( EVENT_CUE_TIME ));					return;				}			}		}		/* -- VIDEO EVENTS --------------------------------------------------		 *		 *		 */		private function netStatusHandler( $_e:NetStatusEvent ):void {			trace( this, $_e.info.code );  			switch( $_e.info.code ) {				case "NetStream.Play.Stop" :					netstreamIsComplete = true;					break;				case "NetConnection.Connect.Success" :					killTimeoutTimer();					playVideo();					break;				case "NetStream.Play.StreamNotFound" :					break;				case "NetStream.Buffer.Full" :					break;				case "NetStream.Buffer.Empty" :					if( netstreamIsComplete )						dispatchEvent( new Event( EVENT_VIDEO_END ));					break;				case "NetStream.Play.Start" :					dispatchEvent( new Event( EVENT_VIDEO_START ));					break;				case "NetStream.Seek.Notify" :					break;				case "NetStream.Seek.InvalidTime" :					break;			}		}					private function ioErrorHandler( $_e:IOErrorEvent ):void {			trace( this, 'ioErrorHandler: ' + $_e.text );			dispatchEvent( new Event( EVENT_VIDEO_END ));		}		private function securityErrorHandler( $_e:SecurityErrorEvent ):void {			trace( this, "securityErrorHandler: " + $_e );			dispatchEvent( new Event( EVENT_VIDEO_END ));		}		private function asyncErrorHandler( $_e:AsyncErrorEvent ):void {			trace( this, 'asyncErrorHandler: ' + $_e );			dispatchEvent( new Event( EVENT_VIDEO_END ));		}				/* -- CALLBACKS -------------------------------------------		 *		 */		public function onMetaData( $_info:Object ):void {			trace( this, "onMetaData: duration=" + $_info.duration + " width=" + $_info.width + " height=" + $_info.height + " framerate=" + $_info.framerate );			metaData = $_info;			video.width = $_info.width;			video.height = $_info.height;			visible = true;			if( doFadeIn ) {				alpha = 0;				addEventListener( Event.ENTER_FRAME, function( $_e:Event ) {					alpha += ( 1-alpha )/10;					if( alpha >= .95) {						alpha = 1;						$_e.target.removeEventListener( $_e.type, arguments.callee );					}				});			}		}		public function onCuePoint( $_info:Object ):void {			trace( this, "cuepoint: time=" + $_info.time + " name=" + $_info.name + " type=" + $_info.type);			var _cueTime:Object = {				seconds: $_info.time,				label: $_info.name			};			currentCueTime = _cueTime;			dispatchEvent( new Event( EVENT_CUE_TIME ));		}		public function onPlayStatus( $_info:Object ) {			trace( this, 'onPlayStatus: ' + $_info.code );			if( $_info.code == "NetStream.Play.Complete" ) {				removeEventListener( Event.ENTER_FRAME, handleEnterFrame );				dispatchEvent( new Event( EVENT_VIDEO_END ));			}		}		public function onImageData( $_info:Object ):void {			trace( this, 'onImageData()' );		}		public function onTextData( $_info:Object ):void {			trace( this, 'onTextData()' );		}		public function onBWDone():void {			trace( this, 'onBWDone()' );		}		public function onXMPData( $_info:Object ):void {			trace( this, 'onXMPData()' );		}		public function close( $_info:Object ):void {			trace( this, 'close()' );		}								private function startTimeoutTimer():void {			trace( this, 'startTimeoutTimer()' );			timeoutTimer = new Timer( timeoutIn, 1 );			timeoutTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleTimeout );			timeoutTimer.start();		}		private function killTimeoutTimer():void {			trace( this, 'killTimeoutTimer()' );			timeoutTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleTimeout );			timeoutTimer.stop();		}		private function handleTimeout( $_e:TimerEvent ):void {			trace( this, 'handleTimeout()' );			connection.close();			dispatchEvent( new Event( EVENT_VIDEO_END ));		}	}}